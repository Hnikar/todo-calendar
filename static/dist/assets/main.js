/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/modules/auth.js":(e,t,o)=>{o.r(t),o.d(t,{Auth:()=>r});var s=o("./src/modules/loader.js"),n=o("./src/modules/domUtils.js");const r=(()=>{function e(){const e=document.getElementById("authForm");if(!e)return console.error("Auth form not found!");e.addEventListener("submit",o),t("login"),document.querySelectorAll("[data-mode]").forEach((e=>e.addEventListener("click",(()=>{t(e.dataset.mode)}))))}function t(e){const t=document.getElementById("nameField"),o=document.querySelector('#authForm button[type="submit"]'),s=document.getElementById("password"),r=document.querySelectorAll(".tab");t&&(t.style.display="register"===e?"block":"none",document.getElementById("name").required="register"===e),r.forEach((t=>t.classList.toggle("active",t.dataset.mode===e))),o&&(o.textContent="login"===e?"Login":"Register"),s&&(s.autocomplete="login"===e?"current-password":"new-password"),n.DomUtils.clearMessages()}async function o(e){e.preventDefault(),n.DomUtils.clearMessages(),s.Loader.toggle(!0);const o=document.querySelector('[data-mode="login"]').classList.contains("active"),a=o?"/api/login":"/api/register",c={email:r("email"),password:r("password")};o||(c.name=r("name"));try{!function(e,t){const o=[];if(e.email?/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e.email)||o.push("Invalid email format."):o.push("Email is required."),e.password?e.password.length<8&&!t&&o.push("Password must be at least 8 characters."):o.push("Password is required."),t||e.name&&!(e.name.length<2)||o.push("Name must be at least 2 characters."),o.length)throw new Error(o.join("\n"))}(c,o);const e=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(c)});await async function(e,o){const s=e.headers.get("content-type")?.includes("application/json"),r=s?await e.json():{message:await e.text()};if(!e.ok)throw new Error(r.error||`Error: ${e.status}`);o?(localStorage.setItem("user",JSON.stringify(r.user||{})),window.location.href="/app"):(n.DomUtils.showSuccess(r.message||"Registration successful. Please login."),t("login"),["email","password","name"].forEach((e=>{const t=document.getElementById(e);t&&(t.value="")})))}(e,o)}catch(e){n.DomUtils.showError(e.message||"Unexpected error during submission.")}finally{s.Loader.toggle(!1)}}function r(e){const t=document.getElementById(e);return t?t.value.trim():""}return document.addEventListener("DOMContentLoaded",(()=>{e(),function(){const e=new URLSearchParams(location.search).get("reason"),t={unauthenticated:"Please log in to access the application.",invalid_token:"Session expired. Please log in again.",bad_token_claims:"Session data issue. Please log in again."};e&&t[e]&&n.DomUtils.showError(t[e]),history.replaceState(null,"",location.pathname)}()})),{init:e}})()},"./src/modules/domUtils.js":(e,t,o)=>{o.r(t),o.d(t,{DomUtils:()=>s});const s=(()=>{function e(){const e=document.getElementById("messageContainer");e&&(e.innerHTML=""),document.querySelectorAll(".error-message, .success-message").forEach((t=>{t.parentNode!==e&&t.remove()}))}function t(t,o="error"){e();const s=document.createElement("div");s.className="error"===o?"error-message":"success-message",t.split("\n").forEach((e=>{const t=document.createElement("p");t.textContent=e,s.appendChild(t)}));const n=document.getElementById("messageContainer");if(n)n.appendChild(s);else{const e=document.getElementById("authForm");e?e.parentNode.insertBefore(s,e):document.body.prepend(s)}}return{clearMessages:e,showError:e=>t(e,"error"),showSuccess:e=>t(e,"success")}})()},"./src/modules/events.js":(e,t,o)=>{o.r(t),o.d(t,{Events:()=>n});var s=o("./src/modules/loader.js");const n={fetchAndDisplay:async function(){const e=document.getElementById("eventsOutput");if(e){e.innerHTML="Loading events...",s.Loader.toggle(!0);try{const t=await fetch("/api/events",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok){const e=await t.json().catch((()=>({})));throw new Error(e.error||`HTTP error! Status: ${t.status}`)}const o=await t.json();e.innerHTML=o.length?"<h4>Received Events:</h4><pre>"+JSON.stringify(o,null,2)+"</pre>":"No events found for your account."}catch(t){console.error("Error fetching events:",t),e.innerHTML=`<p class="api-error-message">Error loading events: ${t.message}</p>`}finally{s.Loader.toggle(!1)}}}}},"./src/modules/loader.js":(e,t,o)=>{o.r(t),o.d(t,{Loader:()=>s});const s={toggle:function(e){let t=document.getElementById("loader");!t&&e&&(t=function(){const e=document.createElement("div");return e.id="loader",e.className="loader",e.innerHTML='<div class="spinner"></div>',document.body.appendChild(e),e}()),t&&(t.style.display=e?"flex":"none")}}},"./src/modules/user.js":(e,t,o)=>{o.r(t),o.d(t,{User:()=>r});var s=o("./src/modules/loader.js"),n=o("./src/modules/domUtils.js");const r={logout:async function(){console.log("Attempting logout..."),s.Loader.toggle(!0);try{const e=await fetch("/api/logout",{method:"POST",headers:{Accept:"application/json"}}),t=await e.json().catch((()=>({})));if(!e.ok)throw new Error(t.error||`Logout failed with status: ${e.status}`);console.log("Logout successful via API.")}catch(e){console.error("Logout API call failed:",e),n.DomUtils.showError("Could not properly log out. Clear cookies manually if needed.")}finally{localStorage.removeItem("user"),s.Loader.toggle(!1),window.location.href="/login"}},displayUserData:function(){}}}},o={};function s(e){var n=o[e];if(void 0!==n)return n.exports;var r=o[e]={exports:{}};return t[e](r,r.exports,s),r.exports}s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{s.r(n);var t=s("./src/modules/user.js"),o=s("./src/modules/events.js");s("./src/modules/auth.js"),document.addEventListener("DOMContentLoaded",(()=>{t.User.displayUserData();const s=document.getElementById("btn-logout");s&&s.addEventListener("click",t.User.logout);const n=document.getElementById("fetchEventsBtn");n&&n.addEventListener("click",(()=>{e.preventDefault(),o.Events.fetchAndDisplay})),console.log("Main app initialized.")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,