/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/modules/auth.js":(e,t,o)=>{o.r(t),o.d(t,{Auth:()=>r});var n=o("./src/modules/loader.js"),s=o("./src/modules/domUtils.js");const r=(()=>{function e(){const e=document.getElementById("authForm");if(!e)return console.error("Auth form not found!");e.addEventListener("submit",o),t("login"),document.querySelectorAll("[data-mode]").forEach((e=>e.addEventListener("click",(()=>{t(e.dataset.mode)}))))}function t(e){const t=document.getElementById("nameField"),o=document.querySelector('#authForm button[type="submit"]'),n=document.getElementById("password"),r=document.querySelectorAll(".tab");t&&(t.style.display="register"===e?"block":"none",document.getElementById("name").required="register"===e),r.forEach((t=>t.classList.toggle("active",t.dataset.mode===e))),o&&(o.textContent="login"===e?"Login":"Register"),n&&(n.autocomplete="login"===e?"current-password":"new-password"),s.DomUtils.clearMessages()}async function o(e){e.preventDefault(),s.DomUtils.clearMessages(),n.Loader.toggle(!0);const o=document.querySelector('[data-mode="login"]').classList.contains("active"),a=o?"/api/login":"/api/register",c={email:r("email"),password:r("password")};o||(c.name=r("name"));try{!function(e,t){const o=[];if(e.email?/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e.email)||o.push("Invalid email format."):o.push("Email is required."),e.password?e.password.length<8&&!t&&o.push("Password must be at least 8 characters."):o.push("Password is required."),t||e.name&&!(e.name.length<2)||o.push("Name must be at least 2 characters."),o.length)throw new Error(o.join("\n"))}(c,o);const e=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(c)});await async function(e,o){const n=e.headers.get("content-type")?.includes("application/json"),r=n?await e.json():{message:await e.text()};if(!e.ok)throw new Error(r.error||`Error: ${e.status}`);o?(localStorage.setItem("user",JSON.stringify(r.user||{})),window.location.href="/app"):(s.DomUtils.showSuccess(r.message||"Registration successful. Please login."),t("login"),["email","password","name"].forEach((e=>{const t=document.getElementById(e);t&&(t.value="")})))}(e,o)}catch(e){s.DomUtils.showError(e.message||"Unexpected error during submission.")}finally{n.Loader.toggle(!1)}}function r(e){const t=document.getElementById(e);return t?t.value.trim():""}return document.addEventListener("DOMContentLoaded",(()=>{"/login"===window.location.pathname&&(e(),function(){const e=new URLSearchParams(location.search).get("reason"),t={unauthenticated:"Please log in to access the application.",invalid_token:"Session expired. Please log in again.",bad_token_claims:"Session data issue. Please log in again."};e&&t[e]&&s.DomUtils.showError(t[e]),history.replaceState(null,"",location.pathname)}())})),{init:e}})()},"./src/modules/calendar.js":(e,t,o)=>{o.r(t),o.d(t,{Todo:()=>n});const n=(document.addEventListener("DOMContentLoaded",(function(){var e=document.getElementById("calendar");new FullCalendar.Calendar(e,{initialView:"dayGridMonth"}).render()})),{})},"./src/modules/domUtils.js":(e,t,o)=>{o.r(t),o.d(t,{DomUtils:()=>n});const n=(()=>{function e(){const e=document.getElementById("messageContainer");e&&(e.innerHTML=""),document.querySelectorAll(".error-message, .success-message").forEach((t=>{t.parentNode!==e&&t.remove()}))}function t(t,o="error"){e();const n=document.createElement("div");n.className="error"===o?"error-message":"success-message",t.split("\n").forEach((e=>{const t=document.createElement("p");t.textContent=e,n.appendChild(t)}));const s=document.getElementById("messageContainer");if(s)s.appendChild(n);else{const e=document.getElementById("authForm");e?e.parentNode.insertBefore(n,e):document.body.prepend(n)}}return{clearMessages:e,showError:e=>t(e,"error"),showSuccess:e=>t(e,"success")}})()},"./src/modules/events.js":(e,t,o)=>{o.r(t),o.d(t,{Events:()=>s});var n=o("./src/modules/loader.js");const s={fetchAndDisplay:async function(){const e=document.getElementById("eventsOutput");if(e){e.innerHTML="Loading events...",n.Loader.toggle(!0);try{const t=await fetch("/api/events",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok){const e=await t.json().catch((()=>({})));throw new Error(e.error||`HTTP error! Status: ${t.status}`)}const o=await t.json();e.innerHTML=o.length?"<h4>Received Events:</h4><pre>"+JSON.stringify(o,null,2)+"</pre>":"No events found for your account."}catch(t){console.error("Error fetching events:",t),e.innerHTML=`<p class="api-error-message">Error loading events: ${t.message}</p>`}finally{n.Loader.toggle(!1)}}}}},"./src/modules/loader.js":(e,t,o)=>{o.r(t),o.d(t,{Loader:()=>n});const n={toggle:function(e){let t=document.getElementById("loader");!t&&e&&(t=function(){const e=document.createElement("div");return e.id="loader",e.className="loader",e.innerHTML='<div class="spinner"></div>',document.body.appendChild(e),e}()),t&&(t.style.display=e?"flex":"none")}}},"./src/modules/user.js":(e,t,o)=>{o.r(t),o.d(t,{User:()=>r});var n=o("./src/modules/loader.js"),s=o("./src/modules/domUtils.js");const r=(()=>{async function e(){console.log("Attempting logout..."),n.Loader.toggle(!0);try{const e=await fetch("/api/logout",{method:"POST",headers:{Accept:"application/json"}}),t=await e.json().catch((()=>({})));if(!e.ok)throw new Error(t.error||`Logout failed with status: ${e.status}`);console.log("Logout successful via API.")}catch(e){console.error("Logout API call failed:",e),s.DomUtils.showError("Could not properly log out. Clear cookies manually if needed.")}finally{localStorage.removeItem("user"),n.Loader.toggle(!1),window.location.href="/login"}}return{logout:e,displayUserData:function(){const t=localStorage.getItem("user");if(!t)return e();try{const e=JSON.parse(t).name||"User",o=document.getElementById("user-name-display");o&&(o.textContent=e)}catch(t){console.error("Invalid user data in localStorage."),e()}}}})()}},t={};function o(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,o),r.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{o.r(n);var e=o("./src/modules/user.js"),t=o("./src/modules/events.js");o("./src/modules/auth.js"),o("./src/modules/calendar.js"),document.addEventListener("DOMContentLoaded",(()=>{"/app"===window.location.pathname&&e.User.displayUserData();const o=document.getElementById("btn-logout");o&&o.addEventListener("click",e.User.logout);const n=document.getElementById("fetchEventsBtn");n&&n.addEventListener("click",(()=>t.Events.fetchAndDisplay)),console.log("Main app initialized.")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,